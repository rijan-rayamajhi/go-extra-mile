import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../entities/bug_report_entity.dart';
import '../repositories/bug_report_repository.dart';

class SubmitBugReport {
  final BugReportRepository repository;

  SubmitBugReport({required this.repository});

  Future<Either<Failure, BugReportEntity>> call({
    required String userId,
    required String title,
    required String description,
    required String category,
    required String priority,
    required String severity,
    required List<String> screenshots, // These are local file paths
    String? stepsToReproduce,
    String? deviceInfo,
  }) async {
    // Validate required fields
    if (title.trim().isEmpty) {
      return Left(ValidationFailure('Bug title is required'));
    }
    if (description.trim().isEmpty) {
      return Left(ValidationFailure('Bug description is required'));
    }
    if (screenshots.isEmpty) {
      return Left(ValidationFailure('At least one screenshot is required'));
    }

    // First, submit the bug report without screenshots to get the ID
    final bugReport = BugReportEntity(
      id: '', // Will be generated by the repository
      userId: userId,
      title: title.trim(),
      description: description.trim(),
      category: category,
      priority: priority,
      severity: severity,
      status: BugStatus.pending.value,
      screenshots: [], // Start with empty screenshots
      stepsToReproduce: stepsToReproduce?.trim(),
      deviceInfo: deviceInfo?.trim(),
      createdAt: DateTime.now(),
      rewardAmount: 0, // Initial reward is 0, admin can update later
    );

    // Submit the bug report first to get the ID
    final submitResult = await repository.submitBugReport(bugReport);

    return await submitResult.fold((failure) async => Left(failure), (
      submittedBugReport,
    ) async {
      // Now upload screenshots and get their URLs
      final List<String> screenshotUrls = [];

      for (final screenshotPath in screenshots) {
        final uploadResult = await repository.uploadScreenshot(
          submittedBugReport.id,
          screenshotPath,
        );

        uploadResult.fold(
          (failure) {
            // If screenshot upload fails, we should handle this gracefully
            // For now, we'll continue with other screenshots
          },
          (imageUrl) {
            screenshotUrls.add(imageUrl);
          },
        );
      }

      // Update the bug report with the uploaded screenshot URLs
      if (screenshotUrls.isNotEmpty) {
        final updateResult = await repository.updateBugReportScreenshots(
          submittedBugReport.id,
          screenshotUrls,
        );

        return updateResult.fold(
          (failure) =>
              Right(submittedBugReport), // Return original if update fails
          (updatedBugReport) => Right(updatedBugReport),
        );
      } else {
        // If no screenshots were uploaded successfully, return the original bug report
        return Right(submittedBugReport);
      }
    });
  }
}
